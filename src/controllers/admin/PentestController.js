const express = require('express');
const router = express.Router();
const projectModel = require('../admin/../../database/schemas/project');
const pentestModel = require('../admin/../../database/schemas/pentest');
const findingModel = require('../admin/../../database/schemas/finding');
const assetModel = require('../admin/../../database/schemas/asset');
const AssetService = require('../admin/../../services/AssetService');


//add check
//add validationError
//For now the fields are the same as for project but this will change later
createPentest = async (req, res) => {
 
    //const { title,leadConsultant,scope,startDate,endDate,specialRequirements,executiveSummary } = req.body;
    const findings = req.body.findings;
    const assets = req.body.assets;
    const projectName = Object.values(req.params);
    const project = await projectModel.findOne({'title': projectName})
    const projectId = project._id;
    let alreadyExistingPentest = await pentestModel.findOne({title: project.title, projectIds: projectId});
        if (!alreadyExistingPentest){
             const newPentest = new pentestModel({
            title: project.title,
            leadConsultant: project.leadConsultant,
            scope: project.scope,
            startDate: project.startDate,
            endDate: project.endDate,
            specialRequirements: project.specialRequirements,
            executiveSummary: project.executiveSummary,
            projectIds: projectId,
            });

            alreadyExistingPentest = await newPentest.save();
        }

    for (const finding of findings) {
        let assetsArray = finding.assets;
        let alreadyExistingFinding = await findingModel.findOne({title: finding.title, pentestIds: alreadyExistingPentest._id});
        if (!alreadyExistingFinding){
            const newFinding = new findingModel({
                title: finding.title,
                vulnDescription: finding.vulnDescription,
                findingDescription: finding.findingDescription,
                imapct: finding.imapct,
                execProbability: finding.execProbability,
                severity: finding.severity,
                category: finding.category,
                screenshots: finding.screenshots, ///base64 encoded value or better s3 bucket link
                additionalComments: finding.additionalComments,
                tags: finding.tags,
                pentestIds: alreadyExistingPentest._id
                //mitigation: mitigation
            });

            alreadyExistingFinding = await newFinding.save();
        }

        AssetService.assetSaveAndFindingUpdate(assetsArray,alreadyExistingFinding._id,projectId, assetModel, findingModel, projectModel);
    };

    
    res.send(alreadyExistingPentest)


};


module.exports = { createPentest };